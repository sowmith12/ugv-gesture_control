#include <esp_now.h>
#include <WiFi.h>
#include <Wire.h>

// Replace with your UGV's MAC address (get this from UGV serial monitor)
uint8_t ugvAddress[] = {0xEC, 0x94, 0xCB, 0x52, 0x99, 0x78}; // UPDATE THIS WITH YOUR UGV MAC!

// MPU6050 I2C address
const int MPU6050_ADDR = 0x68;

// Structure to send data
typedef struct struct_message {
  char command[10];
} struct_message;

struct_message myData;
esp_now_peer_info_t peerInfo;

// Function to write to MPU6050 register
void writeMPU6050(byte reg, byte data) {
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(reg);
  Wire.write(data);
  Wire.endTransmission();
}

// Callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Failed");
}

void setup() {
  Serial.begin(115200);
  
  // Initialize I2C for MPU6050
  Wire.begin(21, 22); // SDA=21, SCL=22 for ESP32
  delay(100);
  
  // Initialize MPU6050
  writeMPU6050(0x6B, 0); // Wake up MPU6050
  delay(100);
  
  Serial.println("MPU6050 initialized");
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);
  
  // Print Controller MAC address
  Serial.print("Controller MAC Address: ");
  Serial.println(WiFi.macAddress());
  
  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Register callback function
  esp_now_register_send_cb(OnDataSent);
  
  // Register UGV peer
  memcpy(peerInfo.peer_addr, ugvAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add UGV peer");
    return;
  }
  
  Serial.println("Controller ready! Tilt to control UGV");
}

void loop() {
  // Read accelerometer values
  Wire.beginTransmission(MPU6050_ADDR);
  Wire.write(0x3B); // Starting register for accelerometer data
  Wire.endTransmission(false);
  Wire.requestFrom(MPU6050_ADDR, 6, true);
  
  // Read 6 bytes (2 bytes each for X, Y, Z)
  int16_t ax = (Wire.read() << 8) | Wire.read();
  int16_t ay = (Wire.read() << 8) | Wire.read();
  int16_t az = (Wire.read() << 8) | Wire.read();
  
  // Convert raw values to angles (using the working formula)
  float pitch = atan2(ay, sqrt(ax*ax + az*az)) * 180.0 / PI;  // Forward/Backward
  float roll = atan2(-ax, sqrt(ay*ay + az*az)) * 180.0 / PI;  // Left/Right
  
  // Determine direction based on tilt
  String direction = "STOP";
  
  // Tilt thresholds
  int threshold = 10;
  
  if (pitch > threshold) {
    direction = "FORWARD";
  } else if (pitch < -threshold) {
    direction = "BACKWARD";
  } else if (roll > threshold) {
    direction = "RIGHT";
  } else if (roll < -threshold) {
    direction = "LEFT";
  }
  
  // Send command only if it's different from previous
  static String lastDirection = "";
  if (direction != lastDirection) {
    strcpy(myData.command, direction.c_str());
    
    esp_err_t result = esp_now_send(ugvAddress, (uint8_t *) &myData, sizeof(myData));
    
    if (result == ESP_OK) {
      Serial.print("Sent command: ");
      Serial.println(direction);
    } else {
      Serial.println("Error sending command");
    }
    
    lastDirection = direction;
  }
  
  // Debug output (optional - comment out if you don't want to see angles)
  Serial.print("Pitch: ");
  Serial.print(pitch, 1);
  Serial.print("° | Roll: ");
  Serial.print(roll, 1);
  Serial.print("° | Command: ");
  Serial.println(direction);
  
  delay(100); // Update every 100ms
}
